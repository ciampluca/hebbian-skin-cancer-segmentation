# @package _global_

data:
    drop_last_batch: False
    image_size: 480
    image_mean: [0.4255, 0.2263, 0.2141]
    image_std: [0.2697, 0.1505, 0.1345]
    
    train: &common
        _target_: datasets.SegmentationDataset
        root: ${hydra:runtime.cwd}/data/TREND
        split: train
        split_seed: 87
        cross_val_num_buckets: 10
        cross_val_bucket_validation_index: 0
        in_memory: false
        target: true
        smpleff_regime: 1.
        use_pseudolabel: false
        transforms:
            _target_: albumentations.Compose
            _args_:
                - - _target_: albumentations.LongestMaxSize
                    max_size:
                    - ${data.image_size}
                  - _target_: albumentations.PadIfNeeded
                    min_height: ${data.image_size}
                    min_width: ${data.image_size}
                    border_mode: 0   # it corresponds to cv2.BORDER_CONSTANT
                  - _target_: albumentations.VerticalFlip
                    p: 0.5
                  - _target_: albumentations.HorizontalFlip
                    p: 0.5
                  - _target_: albumentations.ShiftScaleRotate
                    shift_limit: 0.05
                    scale_limit: 0.05
                    rotate_limit: 15
                    p: 0.5
                  - _target_: albumentations.RGBShift
                    r_shift_limit: 15
                    g_shift_limit: 15
                    b_shift_limit: 15
                    p: 0.5
                  - _target_: albumentations.RandomBrightnessContrast
                    p: 0.5
                  - _target_: albumentations.Normalize
                    mean: ${data.image_mean}
                    std: ${data.image_std}
                  - _target_: albumentations.pytorch.ToTensorV2

    validation:
        split: validation
        <<: *common   # reinsert 'train' block content
        transforms:
            _target_: albumentations.Compose
            _args_:
                - - _target_: albumentations.LongestMaxSize
                    max_size:
                    - ${data.image_size}
                  - _target_: albumentations.PadIfNeeded
                    min_height: ${data.image_size}
                    min_width: ${data.image_size}
                    border_mode: 0   # it corresponds to cv2.BORDER_CONSTANT
                  - _target_: albumentations.Normalize
                    mean: ${data.image_mean}
                    std: ${data.image_std}
                  - _target_: albumentations.pytorch.ToTensorV2